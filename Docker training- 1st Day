docker default IP- 192.168.99.100 (docker-machine ip)
docker pull nginx
docker images OR docker image ls
docker image inspect {imageid}

docker container run -p 5000:80 nginx OR docker run -p 5000:80 (without container word , works with old api, which will be deprciated soon)
Detach mode- docker container run -p 5000:80 -d nginx (--detach also can be used)
docker container ls (will show only live container)
docker container stop {containerid}
docker container ls -a (will show all container including stopped)
docker container start {containeriid} (will start stopped container)
docker container rm {containerid or containername}

Practice- 
------------------------------
nginx 81
httpd 80
sql server 3306

docker container run -p 80:80 --name myhttpd -d httpd (don't user port 443)
docker container run -p 81:80 --name mynginx -d nginx
docker container run -p 3306:8080 --name mymysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes -d mysql
docker container logs {containerid}
------------------------------
Network communication between docker containers: Need to expose the port explicitly when it is being accessed outside. No need to expose for inter-communication.

Docker login- docker login

tag and push

docker tag nginx itasumit/mynginx
docker push itasumit/mynginx

without latest tag (it will not create new repository instead it will create another tag in same repo)
docker tag nginx itasumit/mynginx:1.0
docker push itasumit/mynginx:1.0

-----------------------------------------
2nd Half:
docker netwrok ls
docker network create myapp
docker container run -p 3000:80 --name mynginx -d --network myapp nginx
docker container run --name myubuntu --network myapp ubuntu

gives root accesss=>docker container exec -it mynginx bash
inside bash- 
apt-get update
apt-get install iputils-ping

ping 172.18.0.2 (ip address of another container in same network)

/#: ls
/# cd usr/share/nginx/html 
/#: cat index.html

Second nginx container in same network
docker container run -p 3001:80 --name mynginx2 -d --network myapp nginx

docker inspect {networkname}. Will see connected container to this network
container host name is-> containername.networkname

inside bash of any nginx container- 
apt-get update
apt-get install iputils-ping

ping 172.18.0.2 (ip address of another container in same network)


Third nginx container in diffrent network myapp2:
docker container run -p 3002:80 --name mynginx3 -d --network myapp2 nginx
   
Connecting containers in different network
docker network connect {networkname} {containername}  
docker network connect myapp2 mynginx
ping mynginx3.myapp2 

Disconnect app from network
docker network disconnect {networkname} {containername}  
docker network disconnect myapp2 mynginx

------------------------------------
Problem: 
Create a new virtual network named socgen
create two containers from elasticsearch:2 image
use --network-alias search when creating them to give additional DNS name to respond
Run alpine nslookup search with --net to see the two containers list for the same DNS name
Run centos curl -s search:9200 with --net multiple times until you see unique names 

Solution:
---------------------------------------
docker network create socgen
docker pull elasticsearch:2
docker container run --net socgen --name elastic1 --network-alias search -d elasticsearch:2
docker container run --net socgen --name elastic2 --network-alias search -d elasticsearch:2
docker pull alpine
docker container run --net socgen alpine nslookup search (nslookup is tool for network, search is network alias created above)
docker pull centos
docker container run --net socgen centos curl -s search:9200 (9200 is port number of elasticsearch default port, search is network alias created above)

Remove all stopped container : 
-------------------------------------------
docker container prune


Volumes:
-------------------------------
docker container run --name nginxtest -p 5000:80 -d -v /c/Users/Administrator/Desktop/html:/usr/share/nginx/html nginx

docker volume ls
docker volume create database

docker volume create nginxvol
docker container run -d -p 5000:80 -v nginxvol:/usr/share/nginx/html nginx
docker container exec -it 08ddbd31b1ad bash
cd usr/share/nginx/html/
#/ :apt-get update
#/ :apt-get install nano
#/ :nano index.html

Stop and remove container created above

Create new container
docker container run -d -p 5000:80  --name nginx1 -v nginxvol:/usr/share/nginx/html nginx

Should show index page as modified in volume nginxvol
----------------------------------------------------------
Problem:
Create a postgres container with name voulme psql-data using version 9.6.1
After successfull execution, check usings logs whether the instance is running properly
Next,
We need to upgrade the database version from 9.6.1 to 9.6.2 keeping the same voulme

Solution:
docker volume create psql-data
docker pull postgres:9.6.1
docker container run -d --name psql1 -v psql-data:/var/lib/postgresql/data postgres:9.6.1
docker container logs psql1

Updating version:
docker pull postgres:9.6.2
stop previous postgres container: docker container stop psql1
remove previous postgres container:docker container rm psql1

create new postgres container with same volume and 9.6.2 version: 
docker container run -d --name psql1 -v psql-data:/var/lib/postgresql/data postgres:9.6.2
check logs: docker container logs psql1


